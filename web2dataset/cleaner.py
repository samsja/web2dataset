# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/cleaner.ipynb (unless otherwise specified).

__all__ = ['MetaDataCleanerError', 'check_no_docs_creation', 'MetaDataCleaner', 'IdentityCleaner', 'DuplicateCleaner',
           'ImageCleaner']

# Cell
from abc import ABC, abstractmethod
from functools import wraps
from typing import List

from .document import Document

# Cell
class MetaDataCleanerError(ValueError):
    pass

# Cell
def check_no_docs_creation(f):
    @wraps(f)
    def wrapper(self, docs: List[Document]) -> List[Document]:
        new_docs = f(self, docs)
        if len(new_docs) > len(docs):
            raise MetaDataCleanerError(
                f"the cleaner should not create more docs than originaly. There were before {len(docs)} docs and there are now {len(new_docs)} docs"
            )
        return new_docs

    return wrapper

# Cell
class MetaDataCleaner(ABC):
    @abstractmethod
    @check_no_docs_creation
    def clean(self, docs: List[Document]) -> List[Document]:
        pass

# Cell
class IdentityCleaner:
    @check_no_docs_creation
    def clean(self, docs: List[Document]) -> List[Document]:
        return docs

# Cell
class DuplicateCleaner(MetaDataCleaner):
    @check_no_docs_creation
    def clean(self, docs: List[Document]) -> List[Document]:
        url_doc = {
            doc.image_url: doc for doc in docs
        }  # first we create a dict with image url as key because we want to keep only one doc per image_rul
        return list(url_doc.values())

# Cell
class ImageCleaner:
    def __init__(self, path: str):
        self.path = path

    def clean(self):
        pass