# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/downloader.ipynb (unless otherwise specified).

__all__ = ['Downloader', 'DonwloaderError', 'BasicDownloader', 'MultiThreadedDownloader']

# Cell
import json
import os
import urllib
from abc import ABC, abstractmethod
from typing import List

import jsons

from .document import Document
from .utils_data import get_metadata_path,load_docs

# Cell
class Downloader(ABC):
    def __init__(self, path: str):
        self.path = path
        self.documents = load_docs(self.path)
        self._init_download()

    def _init_download(self):
        self.images_path = f"{self.path}/images"

        if not os.path.isdir(self.images_path):
            os.mkdir(self.images_path)

    @abstractmethod
    def download(self):
        pass

# Cell
class DonwloaderError(ValueError):
    pass

# Cell
class BasicDownloader(Downloader):
    def download(self):

        for doc in self.documents:
            if doc.image_url is None or len(doc.image_url) < 4:
                pass
            elif doc.image_url[0:4] == "data":
                # In some case like with the GoogleImageSearcher the json file have already donwload the data Therefore
                # we don't need to donwload but to move the data from the json
                self._move_image_from_json(doc)
            else:
                self._download_single_file(doc.image_url, self._path_to_file(doc))

    def _path_to_file(self, doc: Document) -> str:
        return f"{self.images_path}/{doc.uuid}"

    def _download_single_file(self, url: str, path_to_file: str):

        try:
            data = urllib.request.urlopen(url)
            with open(f"{path_to_file}", "wb") as fp:
                fp.write(data.read())

        except urllib.error as e:
            print(f"unable to donwload {path_to_file}, following error {e}")

    def _move_image_from_json(self, doc: Document):

        try:
            with open(self._path_to_file(doc), "wb") as fp:
                data = urllib.request.urlopen(doc.image_url)
                fp.write(data.file.read())
        except urllib.error as e:
            print(e)

        doc.image_url = None

        with open(f"{self.path}/metadata/{doc.uuid}.json", "w") as fp:
            json.dump(jsons.dump(doc), fp)

# Cell
class MultiThreadedDownloader(Downloader):
    pass